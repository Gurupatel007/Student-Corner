<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Users</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-gradient-to-br from-zinc-900 to-zinc-800 text-zinc-200 font-sans">
    <div class="container mx-auto px-4 py-8">
        <div class="flex gap-x-16 " >
            <a href="/admin/dashboard"
                class="inline-block bg-zinc-700 hover:bg-zinc-600 text-zinc-200 font-semibold py-2 px-4 rounded-md transition duration-300 ease-in-out transform hover:scale-105 mb-4">
                <i data-feather="arrow-left" class="inline-block mr-2"></i> Back to Dashboard
            </a>
            <a href="/admin/users/add"
                class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition duration-300 ease-in-out transform hover:scale-105 mb-4">
                <i data-feather="plus" class="inline-block mr-2"></i> Add User
            </a>
        </div>

        <h1 class="text-4xl font-bold mb-8 text-center text-[#B0A4D1]">Manage Users</h1>
        <div class="bg-zinc-800 p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4">User List</h2>
            <table class="w-full">
                <thead>
                    <tr>
                        <th class="text-left px-6 py-3">Name</th>
                        <th class="text-left px-6 py-3">Email</th>
                        <th class="text-right px-6 py-3">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-zinc-800 divide-y divide-gray-700">
                    <% users.forEach(user=> { %>
                        <tr class="transition-colors hover:bg-zinc-700">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm font-medium text-white">
                                    <%= user.name %>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-400">
                                    <%= user.email %>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <button onclick="openModal('view', '<%= user.id %>')"
                                    class="text-blue-400 hover:text-blue-300 bg-blue-900 hover:bg-blue-800 px-3 py-2 rounded-md mr-2 transition-colors">View</button>
                                <button onclick="openModal('edit', '<%= user.id %>')"
                                    class="text-yellow-400 hover:text-yellow-300 bg-yellow-900 hover:bg-yellow-800 px-3 py-2 rounded-md mr-2 transition-colors">Edit</button>
                                <form action="/admin/users/<%= user.email %>/delete" method="POST" id="deleteForm"
                                    class="deleteUser inline">
                                    <button type="submit"
                                        class="text-red-400 hover:text-red-300 bg-red-900 hover:bg-red-800 px-3 py-2 rounded-md transition-colors">Delete</button>
                                </form>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>
        </div>
    </div>


    <!-- View Modal -->
    <div id="viewModal" class="modal fixed inset-0 bg-black bg-opacity-50 items-center justify-center hidden">
        <div class="bg-zinc-800 p-6 rounded-lg shadow-lg w-1/3">
            <button class="modal-close float-right text-red-600">X</button>
            <h2 class="text-2xl font-semibold mb-4 text-white">User Details</h2>
            <div id="viewModalContent" class="flex flex-col gap-4 "></div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal fixed inset-0 bg-black bg-opacity-50 items-center justify-center hidden">
        <div class="bg-zinc-800 p-6 rounded-lg shadow-lg w-1/3">
            <button class="modal-close float-right text-red-600">X</button>
            <h2 class="text-2xl font-semibold mb-4 text-white">Edit User</h2>
            <div id="editModalContent"></div>
        </div>
    </div>

    <script>
        function openModal(type, userId) {
            fetch(`/admin/users/${userId}`)
                .then(response => response.json())
                .then(data => {
                    if (type === 'view') {
                        document.getElementById('viewModalContent').innerHTML = `
            <p><strong>Name:</strong> ${data.name}</p>
            <p><strong>Phone Number:</strong> ${data.phonenumber}</p>
            <p><strong>Email:</strong> ${data.email}</p>
            <p><strong>Date of Birth:</strong> ${new Date(data.dob).toLocaleDateString()}</p>
            <p><strong>Gender:</strong> ${data.gender}</p>
            <p><strong>Password:</strong> ${data.password}</p>
        `;
                        document.getElementById('viewModal').style.display = 'flex';
                    } else if (type === 'edit') {
                        document.getElementById('editModalContent').innerHTML = `
            <form id="updateForm" action="/admin/users/${userId}/edit" method="POST" class="bg-zinc-700 p-6 rounded-lg shadow-lg w-full max-w-lg mx-auto">
        <label for="name" class="block text-white mb-2 font-medium">Name:</label>
        <input type="text" id="name" name="name" value="${data.name}" class="block bg-zinc-700 w-full mb-4 p-2 border border-gray-300 rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
        
        <label for="phonenumber" class="block text-white mb-2 font-medium">Phone Number:</label>
        <input type="text" id="phonenumber" name="phonenumber" value="${data.phonenumber}" class="block bg-zinc-700 w-full mb-4 p-2 border border-gray-300 rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
        
        <label for="email" class="block text-white mb-2 font-medium">Email:</label>
        <input type="email" id="email" name="email" value="${data.email}" class="block w-full bg-zinc-700 mb-4 p-2 border border-gray-300 rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
        
        <label for="dob" class="block text-white mb-2 font-medium">Date of Birth:</label>
        <input type="date" id="dob" name="dob" value="${new Date(data.dob).toISOString().split('T')[0]}" class="block w-full bg-zinc-700 mb-4 p-2 border border-gray-300 rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
        
        <label for="gender" class="block text-white mb-2 font-medium">Gender:</label>
        <select id="gender" name="gender" class="block bg-zinc-700 w-full mb-4 p-2 border border-gray-300 rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
            <option value="Male" ${data.gender === 'Male' ? 'selected' : ''}>Male</option>
            <option value="Female" ${data.gender === 'Female' ? 'selected' : ''}>Female</option>
            <option value="Other" ${data.gender === 'Other' ? 'selected' : ''}>Other</option>
        </select>
        
        <label for="password" class="block text-white mb-2 font-medium">Password:</label>
        <div class="relative">
            <input type="password" id="password" name="password" value="${data.password}" class="block w-full bg-zinc-700 mb-4 p-2 border border-gray-300 rounded-md focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
            <button type="button" id="togglePassword" onclick="showPass()" class="absolute right-2 top-2 text-white-500 hover:text-slate-300">Show</button>
        </div>
        
        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">Save</button>
    </form>
        `;
                        document.getElementById('editModal').style.display = 'flex';

                        const form = document.getElementById('updateForm');
                        form.addEventListener('submit', handleFormSubmit)
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while fetching user data.');
                });
        }

        function closeModal(type) {
            document.getElementById(`${type}Modal`).style.display = 'none';
        }

        // Initialize Feather Icons
        feather.replace();

        // Add event listeners for close buttons
        document.querySelectorAll('.modal-close').forEach(button => {
            button.addEventListener('click', (event) => {
                event.preventDefault();
                const modalId = button.closest('.modal').id;
                closeModal(modalId.replace('Modal', ''));
            });
        });
        function showPass() {
            var pass = document.getElementById("password");
            var toggle = document.getElementById("togglePassword");
            if (pass.type === "password") {
                pass.type = "text";
                toggle.textContent = "Hide";
            } else {
                pass.type = "password";
                toggle.textContent = "Show";
            }
        }


        function handleFormSubmit(event) {
            event.preventDefault(); // Prevent the default form submission

            const form = event.target;
            // console.log('Form data:', new FormData(form));
            const formData = new FormData(form);

            const jsonData = Object.fromEntries(formData.entries());

            // Log the data being sent
            console.log("Data being sent to server:", jsonData)

            // Perform the form submission via fetch
            fetch(form.action, {
                method: form.method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(jsonData)
            })
                .then(response => response.json())
                .then(data => {
                    console.log("Server response:", data);  // Log the server response
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            closeModal('edit');
                            // Optionally refresh the user list or page here
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || 'There was an error updating the information.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'There was an error updating the information.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
        }
        document.querySelectorAll('.deleteUser').forEach(form => {
            form.addEventListener('submit', function (event) {
                event.preventDefault(); // Prevent the default form submission

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Perform the form submission via fetch
                        fetch(this.action, {
                            method: this.method,
                            body: new FormData(this)
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire(
                                        'Deleted!',
                                        'User has been deleted.',
                                        'success'
                                    ).then(() => {
                                        // Remove the deleted user's row from the table
                                        this.closest('tr').remove();
                                    });
                                } else {
                                    Swal.fire(
                                        'Error!',
                                        'There was an error deleting the user.',
                                        'error'
                                    );
                                }
                            })
                            .catch(error => {
                                Swal.fire(
                                    'Error!',
                                    'There was an error deleting the user.',
                                    'error'
                                );
                            });
                    }
                });
            });
        });
    </script>
</body>

</html>